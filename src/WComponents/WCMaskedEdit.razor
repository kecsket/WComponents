@inherits InputText
@implements IAsyncDisposable
@inject IJSRuntime JSRuntime

<input @ref=InputElementReference
       @attributes="AdditionalAttributes"
       class="@CssClass"
       value="@CurrentValue"
       @oninput="EventCallback.Factory.CreateBinder<string>(this, __value => CurrentValueAsString = __value, CurrentValueAsString)"
       @onkeydown="KeyDown" @onkeydown:preventDefault/>

@code
{
    private Task<IJSObjectReference> _module;
    private Task<IJSObjectReference> Module => _module ??= JSRuntime.InvokeAsync<IJSObjectReference>("import", "./_content/WComponents/js/WCMaskedEdit.js").AsTask();

    ElementReference InputElementReference;

    private async void KeyDown(KeyboardEventArgs args)
    {
        int KeyDownPosition = await GetCaretPositionAsync();

        if (args.Key == "r")
        {
            CurrentValueAsString = "httthhhhhr" + KeyDownPosition.ToString();
            await SetCaretPositionAsync(4);

        }
        if (args.Key == "t")
        {
            await SetCaretPositionAsync(2);
        }
    }

    private async Task SetCaretPositionAsync(int position)
    {
        var module = await Module;
        await module.InvokeVoidAsync("setCaretPosition", InputElementReference, position);
    }

    private async Task<int> GetCaretPositionAsync()
    {
        var module = await Module;
        return await module.InvokeAsync<int>("getCaretPosition", InputElementReference);
    }

    public async ValueTask DisposeAsync()
    {
        if (_module != null)
        {
            var module = await _module;
            await module.DisposeAsync();
        }
    }
}